https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
//   dry run for visualisation
  bool dfs(int node, vector<int> adj[], vector<int>& vis, vector<int>& pvis){
      vis[node]=1;
      pvis[node]=1;
      
      for(auto it:adj[node]){
          if(!vis[it]){ 
              if(dfs(it, adj, vis, pvis)) return true;
          }else if(pvis[it]){//agar node visited hai aur uska path bhi visited hai mtlb cycle hai
              return true;
          }
      }
      pvis[node]=0; // call return hui to path visited unvisited krdia
      return false;
  }
  
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V);// visted vector
        vector<int> pvis(V); // vector to mark the path of element as visited
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if (dfs(i, adj, vis, pvis)) return true;
            }
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
