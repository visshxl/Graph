https://leetcode.com/problems/number-of-islands/
class Solution {
public:
    void dfs(int row, int col, vector<vector<char>>& grid, vector<vector<int>>& vis){
        vis[row][col]=1;
        // array delta for moving up right down left in the matrix
        int del[]={-1, 0, 1, 0, -1};
        for(int i=0; i<4; i++){ // iterator for the delta array
            // genrating indexes of new rows and cols
            int nrow=row+del[i];
            int ncol=col+del[i+1];
            // bound condtion check for the new row and cols
            if(nrow>=0 && ncol>=0 && nrow<grid.size() && ncol<grid[0].size()){
                if(!vis[nrow][ncol] && grid[nrow][ncol]=='1'){ // is not visited and is also the part of island
                    dfs(nrow, ncol, grid, vis);
                }
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int cnt=0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){ 
                // if we found the 1 which is the part of island and is unmarked we call dfs
                // to go and mark all the parts of the island
                if(grid[i][j]=='1' && !vis[i][j]){
                    dfs(i, j, grid, vis);
                    cnt++;
                }
                // **for each unique island this call goes only single time so we count the
                // number of island in this if condition only
            }
        }
        return cnt;
    }
};
// graph by madhur
